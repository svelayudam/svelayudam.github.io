I"dJ<p>I learned a lot while building this website; I hope to share it so that it might be
helpful for anyone trying to do the same. I’m sure you’ll notice that I’m far from an
expert in the subjects we’re going to explore here; this is my first foray into web
development. If you have any corrections, or things I’ve misunderstood, I’d love to hear
about it! Just post a comment.</p>

<p>The site is built using <a href="https://jekyllrb.com/">Jekyll</a>, using the theme <a href="https://mmistakes.github.io/minimal-mistakes/">Minimal Mistakes</a>. I host it on
<a href="https://pages.github.com/">Github pages</a>, and purchased and manage my domain through <a href="https://domains.google/#/">Google Domains</a>. We’ll
go through each of these steps in detail. I’ll assume that you have the up-to-date
versions of Ruby and Jekyll on your local machine. I’m going through all this in macOS,
which may affect some of the shell commands I give, but translating to Windows shouldn’t
be too hard.</p>

<h2 id="making-a-site-with-minimal-mistakes">Making a site with Minimal Mistakes</h2>

<p>The website for Minimal Mistakes includes a great quick-start guide; I recommend the
<a href="https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/#starting-from-jekyll-new">Starting with <code class="language-plaintext highlighter-rouge">jekyll new</code></a> section as a place to start. Using this you should be
able to establish a base site with some simple demonstration content, using the Minimal
Mistakes theme.</p>

<p>You can always look directly at <a href="https://github.com/peterewills/peterewills.github.io">the source code for my site</a> if you want
to see exactly what I have in my <code class="language-plaintext highlighter-rouge">Gemfile</code>, or <code class="language-plaintext highlighter-rouge">_config.yml</code>, or whatever.</p>

<h3 id="enabling-mathjax">Enabling MathJax</h3>

<p>In order to enable <a href="https://www.mathjax.org">MathJax</a>, which renders the mathematical equations you see in my
posts, you’ll need to edit the file <code class="language-plaintext highlighter-rouge">scripts.html</code> contained in the folder <code class="language-plaintext highlighter-rouge">_includes/</code>
to include a line enabling MathJax. However, you’ll want to avoid overwriting the
contents of the default <code class="language-plaintext highlighter-rouge">scripts.html</code>.</p>

<p>So, we need to find where <code class="language-plaintext highlighter-rouge">bundle</code> is storing the Gem for Minimal Mistakes. To
find this, do</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle show minimal-mistakes-jekyll 
</code></pre></div></div>

<p>If you just want to navigate directly to that directory, do</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd $(bundle show minimal-mistakes-jekyll)
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">bundle</code> doesn’t seem to have <code class="language-plaintext highlighter-rouge">minimal-mistakes-jekyll</code> installed, then you should
add the line <code class="language-plaintext highlighter-rouge">gem "minimal-mistakes-jekyll"</code> to your Gemfile, and run <code class="language-plaintext highlighter-rouge">bundle</code> to
install the Gems.</p>

<p>Now you can copy the default <code class="language-plaintext highlighter-rouge">scripts.html</code> into your site:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp _includes/scripts.html /path/to/site/_includes/scripts.html
</code></pre></div></div>

<p>Open the copied <code class="language-plaintext highlighter-rouge">scripts.html</code> in your editor of choice,<sup id="fnref:fnote1" role="doc-noteref"><a href="#fn:fnote1" class="footnote" rel="footnote">1</a></sup> and add the
following lines at the end:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> 
 
{% if page.mathjax %}
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">async</span>
  <span class="na">src=</span><span class="s">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-MML-AM_CHTML"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/script&gt;</span>
{% endif %}
 </code></pre></figure>

<p>And you’re done!<sup id="fnref:fnote2" role="doc-noteref"><a href="#fn:fnote2" class="footnote" rel="footnote">2</a></sup>  Now, you can type <code class="language-plaintext highlighter-rouge">$$x_1$$</code> to see \(x_1\), and so
on. The <code class="language-plaintext highlighter-rouge">$$...$$</code> syntax will generate inline math if used inline, and will
generate a display equation if used on its own line. So, if one enters</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$$ f(a) = \frac{1}{2\pi i} \oint_\gamma \frac{f(z)}{z-a} dz $$
</code></pre></div></div>

<p>Then the rendered equation appears as so:</p>

\[f(a) = \frac{1}{2\pi i} \oint_\gamma \frac{f(z)}{z-a} dz\]

<p>You can also use <code class="language-plaintext highlighter-rouge">\\[</code> and <code class="language-plaintext highlighter-rouge">\\]</code> as delimiters for display equations, and <code class="language-plaintext highlighter-rouge">\\(</code> and
<code class="language-plaintext highlighter-rouge">\\)</code> as delimiters for inline equations. The double slashes are only necessary in
markdown; if you’re writing raw HTML, then a single slash will suffice.</p>

<h3 id="customize-font-sizes">Customize Font Sizes</h3>

<p>I found the fonts a bit oversized, so I wanted to change the size for the
posts. In order to do this, you need to copy <strong>the entire folder</strong> which
contains all the relevant scss files. In order to do this, do</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd $(bundle show minimal-mistakes-jekyll)
cp -r _sass /path/to/site
</code></pre></div></div>

<p>Now, after much digging through the GitHub issues,<sup id="fnref:fnote3" role="doc-noteref"><a href="#fn:fnote3" class="footnote" rel="footnote">3</a></sup> I found that the
file to edit here is <code class="language-plaintext highlighter-rouge">_sass/_reset.scss</code>. In my site, the relevant chunk of text
looks like</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">  @include breakpoint($medium) {
    font-size: 13px;
  }

  @include breakpoint($large) {
    font-size: 15px;
  }

  @include breakpoint($x-large) {
    font-size: 18px;
  }</code></pre></figure>

<p>Once this file has been edited, you should see the font size reduced in your
page.</p>

<h2 id="getting-it-on-github-pages">Getting it on GitHub Pages</h2>

<p>Okay, now we write a bunch of nonsense, find some beautiful pictures at
<a href="https://git-scm.com/docs/gittutorial">Unsplash</a> to use as headers, and we’re ready to publish the thing on GitHub
Pages. I’ll first go through as though we don’t want to use a custom domain, so
that the website will be exposed at <code class="language-plaintext highlighter-rouge">USERNAME.github.io</code>.</p>

<h3 id="enabling-jekyll-remote-theme">Enabling <code class="language-plaintext highlighter-rouge">jekyll-remote-theme</code></h3>

<p>First of all, make sure that you’re using the <code class="language-plaintext highlighter-rouge">remote-theme</code> jekyll plugin,
which allows you to use any jekyll theme that is GitHub hosted, rather than only
the few that are officially supported. This process is outlined on the Minimal
Mistakes website, but I’ll go through it here.</p>

<p>First, <strong>in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file</strong>, enable the plugin by including it in the
<code class="language-plaintext highlighter-rouge">plugins</code> list, via</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plugins:
  - jekyll-remote-theme
</code></pre></div></div>

<p>If you have other plugins you want to use (I use <code class="language-plaintext highlighter-rouge">jekyll-feed</code>), then add them
to this list as well. Designate the <code class="language-plaintext highlighter-rouge">remote_theme</code> variable, but do so <strong>after
setting the theme</strong>, so that you have in your config file</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>theme: "minimal-mistakes-jekyll"
remote_theme: "mmistakes/minimal-mistakes"
</code></pre></div></div>

<p>Finally, in your <code class="language-plaintext highlighter-rouge">Gemfile</code>, add <code class="language-plaintext highlighter-rouge">gem "jekyll-remote-theme"</code>.</p>

<h3 id="push-it-to-the-repository">Push it to the repository</h3>

<p>GitHub pages looks for a repository that follows the naming convention
<code class="language-plaintext highlighter-rouge">USERNAME.github.io</code>. So, for example, since my GitHub username is
<code class="language-plaintext highlighter-rouge">peterewills</code>, the repository for the source of this site is at
<code class="language-plaintext highlighter-rouge">https://www.github.com/peterewills/peterewills.github.io</code>.</p>

<p>Once you’ve created such a repository, initialize a git repo on your site by
going into <code class="language-plaintext highlighter-rouge">path/to/your/site</code> and doing <code class="language-plaintext highlighter-rouge">git init</code>. Then, do</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add origin https://www.github.com/USERNAME/USERNAME.github.io
</code></pre></div></div>

<p>and then commit and push. (If you’re unfamiliar with using git, I recommend <a href="https://git-scm.com/docs/gittutorial">either</a>
of <a href="https://try.github.io/levels/1/challenges/1">these</a> tutorials.) You’ll get an email telling you that your page build was
successful, but you’re “using an unsupported theme.” Don’t worry about this; it happens
whenever you use <code class="language-plaintext highlighter-rouge">remote-theme</code>.</p>

<p>You now should be able to navigate to <code class="language-plaintext highlighter-rouge">USERNAME.github.io</code> and see your page!</p>

<h2 id="using-a-custom-domain">Using a Custom Domain</h2>

<p>Suppose you’d prefer to use a custom domain, such as <code class="language-plaintext highlighter-rouge">mydomain.pizza</code> (this is
actually a real, and available, domain name). There are lots of ways to do this;
I did it through <a href="https://domains.google.com">Google Domains</a>, so I’ll go through those steps.</p>

<p>First, you go to <a href="https://domains.google.com">Google Domains</a>, pick out the domain you want, and register
it. For this example, we’ll assume you went with <code class="language-plaintext highlighter-rouge">mydomain.pizza</code>. You should
now see it appear under the <strong>My Domains</strong> tab on the right side of the
page. You should see a domain called <code class="language-plaintext highlighter-rouge">mydomain.pizza</code> and a <strong>DNS</strong> option. This
is what we need to edit.</p>

<p>We need to configure the DNS behavior of our domain so that it points at the IP
address where GitHub Pages is hosting it. On the DNS page, scroll down to
<strong>Custom Resource Records</strong>. You’ll want to add three custom resource records;
two “host” resource records (designated by an A) and one “alias” resource record
(designated by CNAME). GitHub pages exposes its sites at IP addresses
192.30.252.153 and 192.30.252.154. So, you’ll want to add both of these as host
resource records. You’ll want to add your GitHub Pages url <code class="language-plaintext highlighter-rouge">USERNAME.github.io</code>
as an alias record. By the time you’ve added the three, your list of resource
records should look like the example below.</p>

<p><img src="/assets/images/custom_resource.png" alt="" /></p>

<p>So, now your url (<code class="language-plaintext highlighter-rouge">mydomain.pizza</code>) knows that it is an alias for
<code class="language-plaintext highlighter-rouge">USERNAME.github.io</code>, but we still have to specify this aliasing on the GitHub
end of things.</p>

<p>To do this, simply make a text file called <code class="language-plaintext highlighter-rouge">CNAME</code> and include on the first line</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mydomain.pizza
</code></pre></div></div>

<p>This is the entire contents of the text file <code class="language-plaintext highlighter-rouge">CNAME</code>. Once this is pushed to the
repository <code class="language-plaintext highlighter-rouge">USERNAME/USERNAME.github.io</code>, the appropriate settings should
automatically update themselves. To check this, go to the respository settings,
scroll down to the “GitHub Pages” settings, and look under “Custom domain.” You
should see something like the following:</p>

<p><img src="/assets/images/github_repo.png" alt="" /></p>

<p>If the DNS record of your Google domain has not yet been updated, then you will
see <code class="language-plaintext highlighter-rouge">Your site is ready to be published mydomain.pizza</code> on a yellow
background. Note that it sometimes takes up to 48 hours for DNS records to
update, so be patient.</p>

<p>Once the DNS records have updated, you should be able to see your site at
<code class="language-plaintext highlighter-rouge">mydomain.pizza</code>.</p>

<h2 id="enabling-comments-via-disqus">Enabling Comments via Disqus</h2>

<p>Minimal Mistakes has excellent support for comments built in to the theme. I chose to
use Disqus as comments platform, but it supports others. If you choose to go another
route, you can look on the <a href="https://mmistakes.github.io/minimal-mistakes/docs/configuration/#comments">minimal-mistakes
guide</a> for
more direct assistance.</p>

<p>To get Disqus comments up and running, you should go to <a href="http://disqus.com">the Disqus
homepage</a> and sign up. Eventually you should have a “shortname” that
you can use for your site. Once you have this, you just need to add the following to
your <code class="language-plaintext highlighter-rouge">_config.yml</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>comments:
  provider: "disqus"
  disqus:
    shortname: "my-shortname"
</code></pre></div></div>

<h3 id="a-caveat">A Caveat</h3>

<p>Even if you include this, you will not see Disqus comments appear in your posts when you
do <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code> and look at the posts on <code class="language-plaintext highlighter-rouge">localhost:4000</code>. Why don’t they
show up?</p>

<p>When you build locally, you are by default building in the <code class="language-plaintext highlighter-rouge">development</code> environment. In
minimal mistakes, comments are only active in the <code class="language-plaintext highlighter-rouge">production</code> environment. You can test
what environment you’re in by including the following chunk of code on a page:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> 
 
{% if jekyll.environment == "production" %}
   # YOU'RE IN A PRODUCTION ENVIRONMENT
{% endif %}</code></pre></figure>

<p>For more on environments, you can check out <a href="https://jekyllrb.com/docs/configuration/environments/">the official Jekyll
docs</a>. You <em>should</em> be able to
run your local Jekyll server in a production environment by doing</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>JEKYLL_ENV=production bundle exec jekyll serve 
</code></pre></div></div>

<p>but this never worked for me, so I had to test that comments were working by pushing to
GitHub and looking at my posts live in production.</p>

<h2 id="using-google-analytics-to-monitor-traffic">Using Google Analytics to Monitor Traffic</h2>

<p>Minimal mistakes also includes nice support for google analytics. Similar to Disqus
comments, you’ll need to sign up for google analytics and follow the steps there to get
a <code class="language-plaintext highlighter-rouge">tracking_id</code> for your site. Then, in your <code class="language-plaintext highlighter-rouge">_config.yml</code>, include the following blob:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>analytics:
  provider: "google"
  google:
    tracking_id: "XB-934572345-6"
</code></pre></div></div>

<p>You should then be able to use the Google Analytics dashboard to monitor traffic on your
site. You can look at the <a href="https://mmistakes.github.io/minimal-mistakes/docs/configuration/#analytics">minimal mistakes documentation on
analytics</a>
for more details, especially if you plan on using a different analytics provider.</p>

<h2 id="conclusion">Conclusion</h2>

<p>As I said at the beginning of the post, you can check out <a href="https://www.github.com/peterewills/peterewills.github.io">the repository for my
site</a> to see examples of what I’ve gone through here; including my <code class="language-plaintext highlighter-rouge">CNAME</code> file, my
<code class="language-plaintext highlighter-rouge">_include/scripts.html</code> file that enables MathJax, and my <code class="language-plaintext highlighter-rouge">_config.yml</code> file. Please let
me know, either by email or in the comments, if you have any questions or corrections!</p>

<!-------------------------------- FOOTER ---------------------------->

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:fnote1" role="doc-endnote">
      <p>Presumably emacs. <a href="#fnref:fnote1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:fnote2" role="doc-endnote">
      <p>Some <a href="http://dasonk.com/blog/2012/10/09/Using-Jekyll-and-Mathjax">older blog posts</a> discuss the process of adding kramdown as
the markdown rendering engine, but this is default behavior for Jekyll 3.x,
so there’s no need to do this step. <a href="#fnref:fnote2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:fnote3" role="doc-endnote">
      <p>Michael, the guy who built Minimal Mistakes, is really wonderful
about responding to issues on GitHub, which are really used as a support
forum for people using the theme who have no experience in web development
(such as myself). <a href="#fnref:fnote3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET